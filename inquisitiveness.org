This will be the first collaboration file for inquisitiveness

Sorts we are using
n^2 Insertion, Swap
n log n Merge, Heap

3 Languages
Java, C++, elisp/python


n^2 sorts in three different languages


* Java Algorithm swap sort
#+BEGIN_SRC java
/**************************************************************
 * Program: SortArray
 * Author: Benjamin Furner
 * Description: Will generate, sort and display a list for a user
 **************************************************************/

import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.List;
import java.util.ArrayList;

public class SortArray {
    private List<Integer> sortedArray;
    

    /************
    * This is the main function, it will be the test/driver program for this class
    * args - these are the arguments that were input by the user on the command line
    ******/
    public static void main(String args[]) {
        SortArray sa = new SortArray();
	List<Integer> al = new ArrayList<>();

	File inFile = null;
	if (0 < args.length) {
	    inFile = new File(args[0]);
	} else {
	    System.err.println("Invalid arguments count:" + args.length);
	    return;
	}
	try {
	    Scanner scanner = new Scanner(inFile);
	    while(scanner.hasNextInt())
		al.add(scanner.nextInt());
	}
	catch (FileNotFoundException ex){
	    System.out.println(ex);
	}

	System.out.println(al.toString());
	al = sa.sort(al);
	System.out.println(al.toString());
    } 

    /******
    * This will drive the main sorting program
    * This will ensure that the values are displayed correctly
    ******/
    public void driveSort(int arraySize) {

    	// generate a list that will need to be sorted
		System.out.println("Unsorted Array");
		List<Integer> array = new ArrayList<>(); 

		// generate the list of numbers with a psudo random order
		for (int i = 1; i <= arraySize; i++) {
			// this will take the unsorted list and will improve it
		    array.add(((i*52 + 2) % (arraySize * 2) % arraySize));
		    System.out.print(((i*52 + 2) % (arraySize * 2) % arraySize) + " ");
		    
		}
		System.out.println();


    	array = sort(array);

    	System.out.println("Second Array System");
    	// loop through the vales and display the resulting array
    	for (Integer i : array)
    	{
    		System.out.print(i + " ");
    	}

    	System.out.println();
    }

    /*************
    * This will actually sort the list to what it should be
    * array - this is the array value that needs to be sorted
    * return: This will return the assorted array so that it can be verified that it was sorted correctly
    **********/
    public List<Integer> sort(List<Integer> array) {
    	
    	// create the array that will be sorted
    	List<Integer> sortedList = new ArrayList<>();

    	// This will loop through the array and will search through and find the smallest value and will
    	// switch the smallest value with the first item.
    	int smallestItemIndex = 0;
    	int j = 0;
    	for (int i = 0; i < array.size(); i++) {
    		// This will reset the variables while taking into account that i numbers of values is already
    		// sorted
    		j = i;
    		smallestItemIndex = i;

    		// This will run through the array values to find the smallest index
    		for ( ; j < array.size(); j++) {
    			
    			// check if the value that j is on is smaller than the current smallest value
    			if (array.get(smallestItemIndex) > array.get(j)) {
    				smallestItemIndex = j;
    			}
    		}

    		// these will swap the i'th element with the smallest item in the remaider of the list
    		int temp = array.get(i);
    		array.set(i, array.get(smallestItemIndex));
    		array.set(smallestItemIndex, temp);

    	}

    	return array;
    }


}
#+end_src

* C++ Algorithm swap sort
#+begin_src c
/******************************************************************
 * Swap Sort takes two parameters
 * Description: Takes an array and sorts it based on the swap sort
 * Author: Benjamin Furner
 ******************************************************************/

#include <iostream>
#include <string>
#include <fstream>
using namespace std;


//Prototypes
template <typename T>
void swapSort(T array[], int sizeArray);
float sToF(const char * val);
int   sToI(char * val);
char checkType(const char * val);

//Test functions
void testCheckType();
void testsToF();

/*****************************************************************
 * int main(int argc, char** argv)
 * Description: Will drive the program that will run/test the sort
 *
 * INPUT:  argc - the number of arguments
 *         argv - the actual aurguments as a string
 * OUTPUT: NONE
 * RETURN: returns a 0 to terminate the program
 *****************************************************************/
int main(int argc, char** argv)
{
	char * inFileName = new char[256];
	if (argc < 2)
	{
	  cout << "Enter input filename: ";
	  cin >> inFileName;
	}
	else if (argc > 1 && argc < 3)
	{
	  inFileName = argv[1];
	  int array[256];
	  ifstream fin(inFileName);

	  int i = 0; 
	  while (fin >> array[i])
	  {
	    cout << array[i] << " ";
	    i++;
	  }
	  cout << endl;

	  swapSort(array, i);

	  
	  for (int j = 0; j < i; j++)
	  {
	    cout << array[j] << " ";
	  }
	  cout << endl;

	  fin.close();
	}
	else if (argc > 2)
	{
		// three check values to see if an array is accurate all the way through
		char firstElement = checkType(argv[1]);
		char middleElement = checkType(argv[argc/2]);
		char lastElement = checkType(argv[argc-1]);
		cout << "Test Values: " << firstElement << " " << middleElement << " " << lastElement << endl;
		if (firstElement == 'c' && middleElement == 'c' && lastElement == 'c')
		{
			// create the string array based on the values input
			string * arrayVals = new string[argc - 1];
			for (int i = 0; i < argc - 1; i++)
			{
				cout << argv[i+1] << endl;
				arrayVals[i] = argv[i+1];
			}
			cout << endl;

			// call the swap sort and give it the array size
			swapSort(arrayVals, argc - 1);


			// this will display the array after it has been sorted by the array to show
			// that it worked correctly
			cout << "Sorted Array: \n";
			for (int i = 0; i < argc - 1; i++)
			{
				cout << arrayVals[i] << endl;
			} 
			cout << endl;
		}
		// check if the the elements in the array are integers, if they are then it is most likely that 
		// all the elements are integers
		else if (firstElement == 'i' && middleElement == 'i' && lastElement == 'i')
		{
			// create the array based on the values input
			int * arrayVals = new int[argc - 1];
			for (int i = 0; i < argc - 1; i++)
			{
				cout << argv[i+1] << endl;
				arrayVals[i] = sToI(argv[i+1]);
			}
			cout << endl;

			// call the swap sort and give it the array size
			swapSort(arrayVals, argc - 1);	

			// this will display the array after it has been sorted by the array to show
			// that it worked correctly
			cout << "Sorted Array: \n";
			for (int i = 0; i < argc - 1; i++)
			{
				cout << arrayVals[i] << endl;
			} 
			cout << endl;		
		}
		// check if the elements in the array are float values, the function will return an int if it does not have
		// a decimal so we have to check if it is mixed
		else if ((firstElement == 'i' || firstElement == 'd') 
				&& (middleElement == 'i' || middleElement == 'd') 
				&& (lastElement == 'i' || lastElement == 'd'))
		{
			// create the array based on the values input
			float * arrayVals = new float[argc - 1];
			for (int i = 0; i < argc - 1; i++)
			{
				cout << argv[i+1] << endl;
				arrayVals[i] = sToF(argv[i+1]);
			}
			cout << endl;

			// call the swap sort and give it the array size
			swapSort(arrayVals, argc - 1);

			// this will display the array after it has been sorted by the array to show
			// that it worked correctly
			cout << "Sorted Array: \n";
			for (int i = 0; i < argc - 1; i++)
			{
				cout << arrayVals[i] << endl;
			} 
			cout << endl;
		}
		else
		{
			cout << "Invalid array input\n";
			return 0;
		}
	}
	else 
	{
		cout << "Command Line Aurgument array expected, input the array on the command line\n";
	}
	return 0;
}

/*******************************************************************
 * float sToF(char * val, int size)
 * Description: This will take a character array and will convert it
 * to a float value
*
 * INPUT: val - this is the value to be converted
 *        size - size of the character array
 * OUTPUT: NONE
 * RETURN: returns the converted float value
 ********************************************************************/
float sToF(const char * val)
{
	// these are the declared variables that will be needed in this function
	float convertFloat = 0;
	bool convertAfterDec = false;

	int i = 0;
	bool isNegative = false;
	if (val[i] == '-')
	{
		i = 1;
		isNegative = true;
	}

	// this will loop through all the float values > 1 and will create the float number
	for ( ; val[i] && val[i] != '.'; i++)
	{
		// this will multiply the answer by 10 to make room for the next 10's number
		convertFloat *= 10;
		// adds the value in the array to the value of the float number
		convertFloat += (val[i] - 48);
	}


	float convertFloatDec = 0;
	// this will loop through all the decimal values and will convert them
	float numDivide = 10;
	if (val[i])
	{
		for ( ++i ; val[i]; i++)
		{
			// adds the decimal value to the number
			convertFloatDec += val[i] - 48;
			// shifts the decimal value over to the left by 10
			convertFloatDec *= 10;
			// keep track of how many values to the left it has been shifted to ensure that it
			// is converted to decimal correctly at the end
			numDivide *= 10;
		}
	}

	// divide by number that was calculated based on how many places to the right it was shifted
	convertFloatDec /= numDivide;

	// adds the two results together and returns the float number
	convertFloat += convertFloatDec;
	if (isNegative)
	{
		convertFloat *= -1;
	}
	return (convertFloat);
}

/*******************************************************************************
 * int sToI(char * val)
 * Description: This function will take a character array and will convert it into
 * an integer value
*
 * INPUT:  val - the character array that is to be converted to an int
 * OUTPUT: NONE
 * RETURN: returns the integer that has been converted from the string
 ********************************************************************************/
int sToI(char * val)
{
	int convertedInt = 0;
	bool isNegative = false;
	int i = 0;
	// loop through each value and convert it to the integer representation in base 10
	// if it is negative it will skip the - sign and will factor it in later
	if (val[i] == '-')
	{
		i = 1;
		isNegative = true;
	}

	// loop through and convert the values in the char array to the int values
	for ( ; val[i]; i++)
	{
		convertedInt *= 10;
		convertedInt += val[i] - 48;
	}

	// check if it was a negative number, if it was convert it to negative
	if (isNegative)
	{
		convertedInt *= -1;
	}
	return convertedInt;
}

/************************************************************************
 * char checkType(char * val)
 * Description: This will check the type and will return a character
 * signifying the type that it discovered
*
 * INPUT:  val - character array that is passed in with a value in it
 * OUTPUT: NONE
 * RETURN: returns a char based on the character type 
 * 		  c - character array
 * 		  d - float/decimal
 *		  i - int
 *		  u - unknown
 *************************************************************************/
 char checkType(const char * val)
 {
	// start with the assumption that this value is undefined or an empty array was passed in
	char type = 'u';
	if (val != NULL && val[0] != '\0')
	{
		// assume the value is a character and if it is changed later then it was not a 
		// character
		type = 'c';
		bool isNumber = true;

		// check if the first character is a '-' then skip the first element in the array
		int i = 0; 
		if (val[0] == '-')
		{
			i = 1;
		}

		// if any of the characters don't fall in the number range then it is not a number
		for ( ; val[i]; i++)
		{
			// check if it is in the value number range
			if ((val[i] < 48 || val[i] > 57) && val[i] != 46)
			{
				isNumber = false;
				break;
			}
		}

		// if it passed the isNumber passed enter this array
		if (isNumber)
		{
			// if the first value is a negative sign we want to skip the first 
			// item in the array
			int i = 0;
			if (val[0] == '-')
			{
				i = 1;
			}	

			// assume it is an int and if it finds a decimal . then it is a decimal number
			type = 'i';
			for ( ; val[i]; i++)
			{
				// check if the number has a decimal
				if (val[i] == '.')
				{
					type = 'd';
					break;
				}
			} // end for loop		
		}  // end of its a number section
	}  // check if the array had any values in it or was just a null character

	return type;
}


/**************************************************************************
 * void swapSort(T array[], int sizeArray)
 * Description: This will use a swap sort to sort the given array that is 
 * passed in
 *
 * INPUT:  array - this is the array of data
 * 		  sizeArray - this is the size of the array that was passed in
 * OUTPUT: array - the updated array is given back to the caller function
 * RETURN: NONE
 ****************************************************************************/
 template <typename T>
 void swapSort(T array[], int sizeArray)
 {
        int smallestValIndx = 0;
  	T tempArrayVal;

  	// this will loop through the array and will keep track of the items that
  	// are currently sorted and the items that need to be sorted
  	for (int i = 0; i < sizeArray; i++)
  	{
  		// this will ensure that the sorted items are separated from the non sorted items
 		smallestValIndx = i;

 		// loops through the remainder of the array to find the smallest value so it can be swapped
    	for (int j = i; j < sizeArray; j++)
    	{
    		// If the current smallest index value is greater than another value in the array the
    		// smallest index becomes the current index value of j
    		if (array[smallestValIndx] > array[j])
    		{

    			smallestValIndx = j;
    		}


    	}

    	// swap the array values using a temporary variable
    	tempArrayVal = array[i];
    	array[i] = array[smallestValIndx];
    	array[smallestValIndx] = tempArrayVal;
  	}
}


/******************************************************************
 * void testCheckType()
 * Description: This will run through several scenario's and will display
 * the correct data type to ensure that it tests correctly
 *
 * INPUT:  NONE
 * OUTPUT: NONE
 * RETURN: NONE
 ********************************************************************/
 void testCheckType()
 {

	//Test sToF or stringToFloat function
	char array[8] = "55a33";
	cout << "First Number: " << array << endl;
	cout << "First Number type: " << checkType(array) << endl;

	char array1[10] = "-3.0c";
	cout << "Second Number: " << array1 << endl;
	cout << "Second Number type: " << checkType(array1) << endl;
	
	string array2; 
	array2 = "-12.452624234252";
	cout << "Third Number: " << array2 << endl;
	cout << "Third Number type: " << checkType(array2.c_str()) << endl;

	array2 = "12.1";
	cout << "4 Number: " << array2 << endl;
	cout << "4 Number type: " << checkType(array2.c_str()) << endl;

	array2 = "abcd";
	cout << "5 Number: " << array2 << endl;
	cout << "5 Number type: " << checkType(array2.c_str()) << endl;

	array2 = "a";
	cout << "6 Number: " << array2 << endl;
	cout << "6 Number type: " << checkType(array2.c_str()) << endl;

	array2 = "";
	cout << "7 Number: " << array2 << endl;
	cout << "7 Number type: " << checkType(array2.c_str()) << endl;

	string array3;
	cout << "8 Number: " << array3 << endl;
	cout << "8 Number type: " << checkType(array3.c_str()) << endl;
}


/*********************************************************************
 * void testsToF()
 * Description: This will test if the function is converting a string to 
 * a float correctly
 *
 * INPUT:  NONE
 * OUTPUT: NONE
 * RETURN: NONE
 ***********************************************************************/
void testsToF()
{
	//Test sToF or stringToFloat function
	char array[8] = "55.33";
	cout << "First Number: " << array << endl;
	cout << "First Number type: " << sToF(array) << endl;

	char array1[10] = "-3.0";
	cout << "Second Number: " << array1 << endl;
	cout << "Second Number type: " << sToF(array1) << endl;
	
	string array2; 
	array2 = "-12.452624234252";
	cout << "Third Number: " << array2 << endl;
	cout << "Third Number type: " << sToF(array2.c_str()) << endl;

	array2 = "12.1";
	cout << "4 Number: " << array2 << endl;
	cout << "4 Number type: " << sToF(array2.c_str()) << endl;

	array2 = "3.33";
	cout << "5 Number: " << array2 << endl;
	cout << "5 Number type: " << sToF(array2.c_str()) << endl;

	array2 = "0";
	cout << "6 Number: " << array2 << endl;
	cout << "6 Number type: " << sToF(array2.c_str()) << endl;

	array2 = "6";
	cout << "7 Number: " << array2 << endl;
	cout << "7 Number type: " << sToF(array2.c_str()) << endl;

	string array3;
	cout << "8 Number: " << array3 << endl;
	cout << "8 Number type: " << sToF(array3.c_str()) << endl;
}

#+end_src
* Python Algorithm swap sort
#+BEGIN_SRC py
//sorry I could not get the file to read correctly but daniel should have
// that part up and running from his so just plug the function in and it 
// should work the same
def main(filename)
    with open('filename') as f:
        lines = f.readlines()
    selection_sort(lines);

def selection_sort(lst):
    for i, e in enumerate(lst):
        mn = min(range(i,len(lst)), key=lst.__getitem__)
        lst[i], lst[mn] = lst[mn], e
    return lst
#+END_SRC
* Java Algorithm insert sort

#+BEGIN_SRC java
import java.util.ArrayList;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;

class InsertSortJava
{

    public static void main(String args[]) {
	InsertSortJava isj = new InsertSortJava();

	ArrayList<Integer> ar = new ArrayList<>();
	File inFile = null;
	if (0 < args.length) {
	    inFile = new File(args[0]);
	} else {
	    System.err.println("Invalid arguments count:" + args.length);
	    return;
	}
	try {
	    Scanner scanner = new Scanner(inFile);
	    while(scanner.hasNextInt())
		ar.add(scanner.nextInt());
	}
	catch (FileNotFoundException ex){
	    System.out.println(ex);
	}

	
	Integer[] arr = ar.toArray(new Integer[ar.size()]);
	System.out.println(java.util.Arrays.toString(arr));
	isj.insertSort(arr);
	System.out.println(java.util.Arrays.toString(arr));

    }

    
    // retrieved from rosetta code.com
    public void insertSort(Integer array[]){
	for(int i = 1; i < array.length; i++){
	    int value = array[i];
	    int j = i - 1;
	    while(j >= 0 && array[j] > value){
		array[j + 1] = array[j];
		j = j - 1;
	    }
	    array[j + 1] = value;
	}
    }

}
#+END_SRC
* C++ Algorithm insert sort
     Fixed Compliation problems sorry about not getting that working before
#+begin_src c
#include <iostream>
#include <fstream>
using namespace std;


template <typename T>
void insertSort(T array[], int sizeArray);

/**************************************************************************
 * 
 *
 *
 **************************************************************************/
int main(int argc, char ** argv)
{
   if (argc > 1)
   {
     char * inFileName = argv[1];
     int array[256]; 
     ifstream fin(inFileName);
     
     int i = 0; 
     while (fin >> array[i])
     {
        cout << array[i] << " ";
        i++;
     }
     cout << endl;

     insertSort(array, i);
  	  
     for (int j = 0; j < i; j++)
     {
        cout << array[j] << " ";
     }
     cout << endl;

     fin.close();
   }
}

/**************************************************************************
 * void swapSort(T array[], int sizeArray)
 * Description: This will use a swap sort to sort the given array that is 
 * passed in
 *
 * INPUT:  array - this is the array of data
 * 		  sizeArray - this is the size of the array that was passed in
 * OUTPUT: array - the updated array is given back to the caller function
 * RETURN: NONE
 ****************************************************************************/
template <typename T>
void insertSort(T array[], int sizeArray)
{
  int smallestValIndx = 0;

  T tempVal;
  bool isInserted = false;
  // loop through the array and insert the values into their correct position
  // while also shifting the values up if they do not match
  for (int i = 0; i < sizeArray; i++)
    {
      // copy the value to be moved into this value
      tempVal = array[i];
      isInserted = false;
      for (int j = i - 1; j >= 0; j--)
	{

	  // check if the array value at j is less than the value we are trying to insert
	  // this will ensure we are inserting only if the value immediately preceeding it
	  // is smaller
	  if (array[j] < tempVal)
	    {
	      array[j+1] = tempVal;
	      isInserted = true;
	      break;
	    }
	  // swap the values that are currently in the array to make room for the inserted element
	  array[j+1] = array[j];
	}

      // check if the value was inserted previously if not it will assign the value to the first place
      // in the array because it means that the value belongs in index 0
      if (!isInserted)
	{
	  array[0] = tempVal;  
	}
    }
}
#+end_src
* ELisp Algorithm insert sort
#+BEGIN_SRC elisp 
(defun min-or-max-of-2-numbers (n1 n2 rel)
  "n1 and n2 are two numbers, rel can be '< or '> according to
what sort of sorting is wanted, this function returns the greater
or smaller number n1 or n2"
  (cond
   ((eval (list rel n1 n2)) n1)
   (t n2)))
 
(defun min-or-max-of-a-list (lon rel)
  "lon is a list of numbers, rel is '< or '>, this fonction
returns the higher or lower number of the list"
  (if (cdr lon)
      (min-or-max-of-2-numbers (car lon) 
			       (min-or-max-of-a-list (cdr lon) rel) 
			       rel)
    (car lon)))
 
(defun remove-number-from-list (n lon)
  "lon is a list of numbers, n is a number belonging to the list,
this function returns the same list but the number n. If n is
present twice or more, it will be removed only once"
  (if lon
      (cond
       ((= (car lon) n) (cdr lon))
       (t (cons (car lon) (remove-number-from-list n (cdr lon)))))
    nil))
 
 
(defun sort-insertion (lon rel)
  "lon is a list of numbers, rel can be '< or '>, this function
returns a list containing the same elements but which is sorted
according to rel"
  (if lon
      (cons (min-or-max-of-a-list lon rel)
	    (sort-insertion 
	     (remove-number-from-list
	      (min-or-max-of-a-list lon rel)
	      lon)
	     rel))
    nil))
 
;;; let's try it :
 
(sort-insertion (list 1 2 3 9 8 7 25 12 3 2 1) '>)
#+END_SRC
